// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dashboard.proto" (package "dashboard", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message dashboard.Greeting
 */
export interface Greeting {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message dashboard.GetGreetingRequest
 */
export interface GetGreetingRequest {
}
/**
 * @generated from protobuf message dashboard.GetGreetingResponse
 */
export interface GetGreetingResponse {
    /**
     * @generated from protobuf field: dashboard.Greeting greeting = 1;
     */
    greeting?: Greeting;
}
// @generated message type with reflection information, may provide speed optimized methods
class Greeting$Type extends MessageType<Greeting> {
    constructor() {
        super("dashboard.Greeting", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Greeting>): Greeting {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<Greeting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Greeting): Greeting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Greeting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.Greeting
 */
export const Greeting = new Greeting$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGreetingRequest$Type extends MessageType<GetGreetingRequest> {
    constructor() {
        super("dashboard.GetGreetingRequest", []);
    }
    create(value?: PartialMessage<GetGreetingRequest>): GetGreetingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGreetingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGreetingRequest): GetGreetingRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetGreetingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.GetGreetingRequest
 */
export const GetGreetingRequest = new GetGreetingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGreetingResponse$Type extends MessageType<GetGreetingResponse> {
    constructor() {
        super("dashboard.GetGreetingResponse", [
            { no: 1, name: "greeting", kind: "message", T: () => Greeting }
        ]);
    }
    create(value?: PartialMessage<GetGreetingResponse>): GetGreetingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGreetingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGreetingResponse): GetGreetingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* dashboard.Greeting greeting */ 1:
                    message.greeting = Greeting.internalBinaryRead(reader, reader.uint32(), options, message.greeting);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGreetingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* dashboard.Greeting greeting = 1; */
        if (message.greeting)
            Greeting.internalBinaryWrite(message.greeting, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dashboard.GetGreetingResponse
 */
export const GetGreetingResponse = new GetGreetingResponse$Type();
/**
 * @generated ServiceType for protobuf service dashboard.Dashboard
 */
export const Dashboard = new ServiceType("dashboard.Dashboard", [
    { name: "GetGreeting", options: {}, I: GetGreetingRequest, O: GetGreetingResponse }
]);
